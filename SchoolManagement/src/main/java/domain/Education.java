/**
 * This file was generated by the Jeddict
 */
package domain;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;

/**
 * @author charl
 */
@Entity
public class Education {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;

	private String name;

	private LocalDate startDate;

	private LocalDate endDate;

	public Education() {
	}

	@OneToMany(mappedBy = "education", cascade = CascadeType.MERGE)
	private List<Student> students;

	@ManyToMany(mappedBy = "educations")
	private List<Course> courses;

	public Education(String name, LocalDate startDate, LocalDate endDate) {
		this.name = name;
		this.startDate = startDate;
		this.endDate = endDate;
		students = new ArrayList<Student>();
		courses = new ArrayList<Course>();
	}

	public void addStudent(Student student) {
		this.students.add(student);
		student.setEducation(this);
	}

	public void addCourse(Course course) {
		this.courses.add(course);
		course.getEducations().add(this);
	}
	
	public int getId() {
		return id;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public LocalDate getStartDate() {
		return this.startDate;
	}

	public void setStartDate(LocalDate startDate) {
		this.startDate = startDate;
	}

	public LocalDate getEndDate() {
		return endDate;
	}
	
	public void setEndDate(LocalDate endDate) {
		this.endDate = endDate;
	}

	public List<Student> getStudents() {
		if (students == null) {
			students = new ArrayList<>();
		}
		return this.students;
	}

	public void setStudents(List<Student> students) {
		this.students = students;
	}

	public List<Course> getCourses() {
		if (courses == null) {
			courses = new ArrayList<>();
		}
		return this.courses;
	}

	public void removeCourse(Course course) {
		getCourses().remove(course);
	}

}